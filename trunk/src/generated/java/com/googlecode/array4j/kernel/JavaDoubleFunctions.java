package com.googlecode.array4j.kernel;

import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;

import com.googlecode.array4j.ArrayFunctions;
import com.googlecode.array4j.DenseArray;

// TODO this code might be autogenerated at some point

public final class JavaDoubleFunctions implements ArrayFunctions {
    public void fill(final ByteBuffer data, final int length) {
        final DoubleBuffer buffer = data.asDoubleBuffer();
        final double start = buffer.get();
        final double delta = buffer.get();
        for (int i = 2; i < length; i++) {
            buffer.put(start + i * delta);
        }
    }

    public void setitem(final Object obj, final ByteBuffer data, final DenseArray arr) {
        final DoubleBuffer buffer = data.asDoubleBuffer();
        if (obj instanceof Number) {
            buffer.put(((Number) obj).doubleValue());
        } else {
            throw new UnsupportedOperationException();
        }
    }

    public void add(final ByteBuffer[] bufptr, final int[] dimensions, final int[] steps, final Object funcdata) {
        final int is1 = steps[0];
        final int is2 = steps[1];
        final int os = steps[2];
        final int n = dimensions[0];
        final ByteBuffer i1 = bufptr[0];
        final ByteBuffer i2 = bufptr[1];
        final ByteBuffer op = bufptr[2];

        for (int i = 0; i < n; i++) {
            final int i1pos = i1.position();
            final double x1 = i1.getDouble();
            i1.position(i1pos + is1);

            final int i2pos = i2.position();
            final double x2 = i2.getDouble();
            i2.position(i2pos + is2);

            final int oppos = op.position();
            op.putDouble(x1 + x2);
            op.position(oppos + os);
        }
    }

    public void multiply(final ByteBuffer[] bufptr, final int[] dimensions, final int[] steps, final Object funcdata) {
        final int is1 = steps[0];
        final int is2 = steps[1];
        final int os = steps[2];
        final int n = dimensions[0];
        final ByteBuffer i1 = bufptr[0];
        final ByteBuffer i2 = bufptr[1];
        final ByteBuffer op = bufptr[2];

        for (int i = 0; i < n; i++) {
            final int i1pos = i1.position();
            final double x1 = i1.getDouble();
            i1.position(i1pos + is1);

            final int i2pos = i2.position();
            final double x2 = i2.getDouble();
            i2.position(i2pos + is2);

            final int oppos = op.position();
            op.putDouble(x1 * x2);
            op.position(oppos + os);
        }
    }

    public void square(final ByteBuffer[] bufptr, final int[] dimensions, final int[] steps, final Object funcdata) {
        final int is1 = steps[0];
        final int os = steps[1];
        final int n = dimensions[0];
        final ByteBuffer i1 = bufptr[0];
        final ByteBuffer op = bufptr[1];

        for (int i = 0; i < n; i++) {
            final int i1pos = i1.position();
            final double x = i1.getDouble();
            i1.position(i1pos + is1);
            final int oppos = op.position();
            op.putDouble(x * x);
            op.position(oppos + os);
        }
    }

    public void ldexp(final ByteBuffer[] bufptr, final int[] dimensions, final int[] steps, final Object funcdata) {
        final int is1 = steps[0];
        final int is2 = steps[1];
        final int os = steps[2];
        final int n = dimensions[0];
        final ByteBuffer i1 = bufptr[0];
        final ByteBuffer i2 = bufptr[1];
        final ByteBuffer op = bufptr[2];

        for (int i = 0; i < n; i++) {
            final int i1pos = i1.position();
            final double x1 = i1.getDouble();
            i1.position(i1pos + is1);

            final int i2pos = i2.position();
            final int x2 = i2.getInt();
            i2.position(i2pos + is2);

            final int oppos = op.position();
            op.putDouble(x1 * Math.pow(2.0, x2));
            op.position(oppos + os);
        }
    }
}
